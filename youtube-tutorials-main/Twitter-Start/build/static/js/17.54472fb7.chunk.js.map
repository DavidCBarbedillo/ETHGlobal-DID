{"version":3,"sources":["../../src/config.ts","../../src/openloginAdapter.ts"],"names":["getOpenloginDefaultOptions","adapterSettings","network","OPENLOGIN_NETWORK","clientId","uxMode","UX_MODE","POPUP","chainConfig","chainNamespace","getChainConfig","loginSettings","relogin","OpenloginAdapter","constructor","params","WALLET_ADAPTERS","OPENLOGIN","ADAPTER_NAMESPACES","MULTICHAIN","ADAPTER_CATEGORY","IN_APP","ADAPTER_STATUS","NOT_READY","CHAIN_NAMESPACES","EIP155","log","defaultOptions","MAINNET","defaultChainIdConfig","WalletInitializationError","chainConfigProxy","provider","init","redirectResult","getHashQueryParams","isRedirectResult","Object","ADAPTER_EVENTS","options","connect","adapter","error","WalletLoginError","disconnect","cleanup","getUserInfo","userInfo","setAdapterSettings","setChainConfig","customChainConfig","connectWithProvider","SolanaPrivateKeyProvider","config","EthereumPrivateKeyProvider","merge","loginProvider","extraLoginOptions","login_hint","finalPrivKey","getED25519Key","reconnected","BaseAdapter"],"mappings":"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","file":"static/js/17.54472fb7.chunk.js","sourcesContent":["import OpenLogin, { OPENLOGIN_NETWORK, UX_MODE, getHashQueryParams } from '@toruslabs/openlogin';\nimport { getChainConfig, BaseAdapter, WALLET_ADAPTERS, ADAPTER_NAMESPACES, ADAPTER_CATEGORY, ADAPTER_STATUS, CHAIN_NAMESPACES, WalletInitializationError, ADAPTER_EVENTS, WalletLoginError } from '@web3auth/base';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport merge from 'lodash.merge';\nimport log from 'loglevel';\n\nconst getOpenloginDefaultOptions = (chainNamespace, chainId) => {\n  return {\n    adapterSettings: {\n      network: OPENLOGIN_NETWORK.MAINNET,\n      clientId: \"\",\n      uxMode: UX_MODE.POPUP\n    },\n    chainConfig: chainNamespace ? getChainConfig(chainNamespace, chainId) : undefined,\n    loginSettings: {\n      relogin: true\n    }\n  };\n};\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nclass OpenloginAdapter extends BaseAdapter {\n  constructor(params) {\n    var _params$chainConfig, _params$chainConfig2, _params$chainConfig3;\n\n    super();\n\n    _defineProperty(this, \"name\", WALLET_ADAPTERS.OPENLOGIN);\n\n    _defineProperty(this, \"adapterNamespace\", ADAPTER_NAMESPACES.MULTICHAIN);\n\n    _defineProperty(this, \"type\", ADAPTER_CATEGORY.IN_APP);\n\n    _defineProperty(this, \"openloginInstance\", null);\n\n    _defineProperty(this, \"status\", ADAPTER_STATUS.NOT_READY);\n\n    _defineProperty(this, \"currentChainNamespace\", CHAIN_NAMESPACES.EIP155);\n\n    _defineProperty(this, \"openloginOptions\", void 0);\n\n    _defineProperty(this, \"loginSettings\", {});\n\n    _defineProperty(this, \"privKeyProvider\", null);\n\n    log.debug(\"const openlogin adapter\", params);\n    const defaultOptions = getOpenloginDefaultOptions((_params$chainConfig = params.chainConfig) === null || _params$chainConfig === void 0 ? void 0 : _params$chainConfig.chainNamespace, (_params$chainConfig2 = params.chainConfig) === null || _params$chainConfig2 === void 0 ? void 0 : _params$chainConfig2.chainId);\n    this.openloginOptions = _objectSpread(_objectSpread({\n      clientId: \"\",\n      network: OPENLOGIN_NETWORK.MAINNET\n    }, defaultOptions.adapterSettings), params.adapterSettings || {});\n    this.loginSettings = _objectSpread(_objectSpread({}, defaultOptions.loginSettings), params.loginSettings); // if no chainNamespace is passed then chain config should be set before calling init\n\n    if ((_params$chainConfig3 = params.chainConfig) !== null && _params$chainConfig3 !== void 0 && _params$chainConfig3.chainNamespace) {\n      var _params$chainConfig4;\n\n      this.currentChainNamespace = (_params$chainConfig4 = params.chainConfig) === null || _params$chainConfig4 === void 0 ? void 0 : _params$chainConfig4.chainNamespace;\n      const defaultChainIdConfig = defaultOptions.chainConfig ? defaultOptions.chainConfig : {};\n      this.chainConfig = _objectSpread(_objectSpread({}, defaultChainIdConfig), params === null || params === void 0 ? void 0 : params.chainConfig);\n      log.debug(\"const openlogin chainConfig\", this.chainConfig);\n\n      if (!this.chainConfig.rpcTarget) {\n        throw WalletInitializationError.invalidParams(\"rpcTarget is required in chainConfig\");\n      }\n    }\n  }\n\n  get chainConfigProxy() {\n    return this.chainConfig ? _objectSpread({}, this.chainConfig) : null;\n  }\n\n  get provider() {\n    var _this$privKeyProvider;\n\n    return ((_this$privKeyProvider = this.privKeyProvider) === null || _this$privKeyProvider === void 0 ? void 0 : _this$privKeyProvider.provider) || null;\n  }\n\n  set provider(_) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options) {\n    var _this$openloginOption;\n\n    super.checkInitializationRequirements();\n    if (!((_this$openloginOption = this.openloginOptions) !== null && _this$openloginOption !== void 0 && _this$openloginOption.clientId)) throw WalletInitializationError.invalidParams(\"clientId is required before openlogin's initialization\");\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    this.openloginInstance = new OpenLogin(this.openloginOptions);\n    const redirectResult = getHashQueryParams();\n    let isRedirectResult = true;\n\n    if (Object.keys(redirectResult).length > 0 && redirectResult.result) {\n      isRedirectResult = true;\n    }\n\n    await this.openloginInstance.init();\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.OPENLOGIN);\n\n    try {\n      // connect only if it is redirect result or if connect (adapter is cached/already connected in same session) is true\n      if (this.openloginInstance.privKey && (options.autoConnect || isRedirectResult)) {\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached openlogin provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(params) {\n    super.checkConnectionRequirements();\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, _objectSpread(_objectSpread({}, params), {}, {\n      adapter: WALLET_ADAPTERS.OPENLOGIN\n    }));\n\n    try {\n      await this.connectWithProvider(params);\n      return this.provider;\n    } catch (error) {\n      log.error(\"Failed to connect with openlogin provider\", error); // ready again to be connected\n\n      this.status = ADAPTER_STATUS.READY;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n\n      if (error !== null && error !== void 0 && error.message.includes(\"user closed popup\")) {\n        throw WalletLoginError.popupClosed();\n      }\n\n      throw WalletLoginError.connectionError(\"Failed to login with openlogin\");\n    }\n  }\n\n  async disconnect() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      cleanup: false\n    };\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    await this.openloginInstance.logout();\n\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.openloginInstance = null;\n      this.privKeyProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo() {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n    const userInfo = await this.openloginInstance.getUserInfo();\n    return userInfo;\n  } // should be called only before initialization.\n\n\n  setAdapterSettings(adapterSettings) {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    const defaultOptions = getOpenloginDefaultOptions();\n    this.openloginOptions = _objectSpread(_objectSpread(_objectSpread({}, defaultOptions.adapterSettings), this.openloginOptions || {}), adapterSettings);\n  } // should be called only before initialization.\n\n\n  setChainConfig(customChainConfig) {\n    super.setChainConfig(customChainConfig);\n    this.currentChainNamespace = customChainConfig.chainNamespace;\n  }\n\n  async connectWithProvider(params) {\n    if (!this.chainConfig) throw WalletInitializationError.invalidParams(\"chainConfig is required before initialization\");\n    if (!this.openloginInstance) throw WalletInitializationError.notReady(\"openloginInstance is not ready\");\n\n    if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n      const {\n        SolanaPrivateKeyProvider\n      } = await import('@web3auth/solana-provider');\n      this.privKeyProvider = new SolanaPrivateKeyProvider({\n        config: {\n          chainConfig: this.chainConfig\n        }\n      });\n    } else if (this.currentChainNamespace === CHAIN_NAMESPACES.EIP155) {\n      const {\n        EthereumPrivateKeyProvider\n      } = await import('@web3auth/ethereum-provider');\n      this.privKeyProvider = new EthereumPrivateKeyProvider({\n        config: {\n          chainConfig: this.chainConfig\n        }\n      });\n    } else {\n      throw new Error(\"Invalid chainNamespace: \".concat(this.currentChainNamespace, \" found while connecting to wallet\"));\n    } // if not logged in then login\n\n\n    if (!this.openloginInstance.privKey && params) {\n      await this.openloginInstance.login(merge(this.loginSettings, {\n        loginProvider: params.loginProvider\n      }, {\n        extraLoginOptions: {\n          login_hint: params === null || params === void 0 ? void 0 : params.login_hint\n        }\n      }));\n    }\n\n    let finalPrivKey = this.openloginInstance.privKey;\n\n    if (finalPrivKey) {\n      if (this.currentChainNamespace === CHAIN_NAMESPACES.SOLANA) {\n        const {\n          getED25519Key\n        } = await import('@toruslabs/openlogin-ed25519');\n        finalPrivKey = getED25519Key(finalPrivKey).sk.toString(\"hex\");\n      }\n\n      await this.privKeyProvider.setupProvider(finalPrivKey);\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.emit(ADAPTER_EVENTS.CONNECTED, {\n        adapter: WALLET_ADAPTERS.OPENLOGIN,\n        reconnected: !params\n      });\n    }\n  }\n\n}\n\nexport { OpenloginAdapter, getOpenloginDefaultOptions };\n//# sourceMappingURL=openloginAdapter.esm.js.map\n",null],"sourceRoot":""}